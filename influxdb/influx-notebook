///////////////////////////////////////////
// Notebook - Ejemplo serie Multivariada //
///////////////////////////////////////////

import "http"
import "date"
import "array"
import "json"

id = "Multivariada"

data =
    from(bucket: "anomalias")
        |> range(start: date.truncate(t: -6h, unit: 1m), stop: date.truncate(t: now(), unit: 1m))
        |> filter(fn: (r) => r._measurement == "boltdb_reads_total" or r._measurement == "boltdb_writes_total")
        |> filter(fn: (r) => r._field == "counter")
        |> aggregateWindow(every: 1m, fn: mean)
        |> group()
        |> map(
            fn: (r) => {
                return {
                    index: r._time,
                    values: r._value,
                    metrics: r._measurement,
                    field: r._field,
                }
            },
        )
        |> yield()

values =
    data
        |> findColumn(fn: (key) => true, column: "values")

index =
    data
        |> findColumn(fn: (key) => true, column: "index")

metrics =
    data
        |> findColumn(fn: (key) => true, column: "metrics")


jsonData = {index: index, values: values, metrics: metrics}

// Creo una serie de largo 15.
http.post(
    url: "http://sm-mac.local:8000/newTS?len=15&id=${id}",
    headers: {Authorization: "Bearer mySuPerSecRetTokEn", "Content-type": "application/json"},
    data: json.encode(v: jsonData),
)
// Seteo el detector en la serie.
http.post(
   url: "http://sm-mac.local:8000/setAD?id=${id}",
   headers: {Authorization: "Bearer mySuPerSecRetTokEn", "Content-type": "application/json"},
)

http.post(
    url: "http://sm-mac.local:8000/fit/${id}",
    headers: {Authorization: "Bearer mySuPerSecRetTokEn", "Content-type": "application/json"},
    data: json.encode(v: jsonData),
)

http.post(
    url: "http://sm-mac.local:8000/start?id=${id}",
    headers: {Authorization: "Bearer mySuPerSecRetTokEn", "Content-type": "application/json"},
)

/////////////////////////////////////////
// Notebook - Ejemplo serie Univariada //
/////////////////////////////////////////

import "http"
import "json"
import "date"

measurement = "go_memstats_alloc_bytes_total"
field = "counter"
id = measurement

data =
    from(bucket: "anomalias")
        |> range(start: date.truncate(t: -6h, unit: 1m), stop: date.truncate(t: now(), unit: 1m))
        |> filter(fn: (r) => r["_measurement"] == "${measurement}")
        |> filter(fn: (r) => r["_field"] == "${field}")
        |> derivative(unit: 1m, nonNegative: true)
        |> aggregateWindow(every: 1m, fn: mean)
        |> yield(name: "ram")

values =
    data
        |> findColumn(fn: (key) => true, column: "_value")

index =
    data
        |> findColumn(fn: (key) => true, column: "_time")

metrics =
    data
        |> findColumn(fn: (key) => true, column: "_measurement")

jsonData = {index: index, values: values, metrics: metrics}


// Creo una serie de largo 5.
http.post(
    url: "http://sm-mac.local:8000/newTS?len=15&id=${id}",
    headers: {Authorization: "Bearer mySuPerSecRetTokEn", "Content-type": "application/json"},
)
// Seteo el detector en la serie.
http.post(
   url: "http://sm-mac.local:8000/setAD?id=${id}",
   headers: {Authorization: "Bearer mySuPerSecRetTokEn", "Content-type": "application/json"},
)

// Entrenamiento del detector
http.post(
    url: "http://sm-mac.local:8000/fit/${id}",
    headers: {Authorization: "Bearer mySuPerSecRetTokEn", "Content-type": "application/json"},
    data: json.encode(v: jsonData),
)

// Inicio del proceso de detecci√≥n
http.post(
    url: "http://sm-mac.local:8000/start?id=${id}",
    headers: {Authorization: "Bearer mySuPerSecRetTokEn", "Content-type": "application/json"},
)